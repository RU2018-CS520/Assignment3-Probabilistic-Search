import numpy as np
from matplotlib import pyplot as plt
from PIL import Image, ImageChops

class  tile(object):
    def __init__(self):
        self.size = 16

        #color
        fColor = [ 69, 116, 253]
        hColor = [138, 128, 101]
        jColor = [240, 100, 240]
        cColor = [188, 188, 188]
        self.colorT = [fColor, hColor, jColor, cColor]

        sColor = [  0,   0,   0]
        eColor = [146,  42,   5]
        
        self.sColorR = sColor[0]
        self.dColorR = eColor[0] - sColor[0]
        self.sColorG = sColor[1]
        self.dColorG = eColor[1] - sColor[1]
        self.sColorB = sColor[2]
        self.dColorB = eColor[2] - sColor[2]

        self.targetColor = [ 18, 227, 219]
        self.hunterColor = [255, 192, 127]
        self.searchColor = [255, 255, 255]

        #shape
        self.backShape = np.asarray([               [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                                                    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]], dtype = np.bool)

        fShape = np.asarray([                       [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0],
                                                    [0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]], dtype = np.bool)

        hShape = np.asarray([                       [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]], dtype = np.bool)

        jShape = np.asarray([                       [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]], dtype = np.bool)

        cShape = np.asarray([                       [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]], dtype = np.bool)

        self.shapeT = [fShape, hShape, jShape, cShape]


        self.targetShape = np.asarray([             [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0],
                                                    [0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0],
                                                    [0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0],
                                                    [0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0],
                                                    [0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0],
                                                    [0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0],
                                                    [0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0],
                                                    [0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0],
                                                    [0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]], dtype = np.bool)

        self.searchShape = np.asarray([             [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],
                                                    [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0],
                                                    [0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]], dtype = np.bool)

        self.hunterShape = np.asarray([             [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                                                    [0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,0],
                                                    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
                                                    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
                                                    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
                                                    [0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,0],
                                                    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
                                                    [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
                                                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]], dtype = np.bool)
        return

    def __call__(self, terrain, prob, target, hunter, search, beacon = False):
        if beacon:
            block = np.full((self.size, self.size, 3), 127, dtype = np.uint8)
        else:
            block = np.full((self.size, self.size, 3), 255, dtype = np.uint8)

        block[self.backShape] = [self.sColorR + int(prob * self.dColorR), self.sColorG + int(prob * self.dColorG), self.sColorB + int(prob * self.dColorB)]

        block[self.shapeT[terrain]] = self.colorT[terrain]

        if target:
            block[self.targetShape] = self.targetColor
        if hunter:
            if search:
                block[self.searchShape] = self.searchColor
            else:
                block[self.hunterShape] = self.hunterColor

        return block